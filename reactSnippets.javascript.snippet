
snippet cl "console.log(...)" b
console.log($0);
endsnippet

snippet cll "console.log(...)" b
console.log('$1', $1);
endsnippet

snippet ce "console.error(...)" b
console.error($0);
endsnippet

snippet cc "createClass" b
var ${1:`!p snip.rv = ''.join(x.title() for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`} = React.createClass({
	/**
  * @return {Object}
  */
	render: function() {
		return (
			$0
		);
	}
});

module.exports = $1;
endsnippet

snippet tg "create tag" b
<$1>
</$1>
endsnippet


snippet im "import * from *" b
import $1 from '$2';
$0
endsnippet

snippet t
<tag>${VISUAL:inside text/should/is/g}</tag>
endsnippet

snippet obj 
const $1 = {
  $2: $3,
  $4: $5,
  $6: $7,
};
$0
endsnippet

snippet ef
const $1 = ($2) => {
  $3
};
$0
endsnippet

snippet map
const $1 = $2.map($3 => {
  $4
});
$0
endsnippet

snippet filter
const $1 = $2.filter($3 => {
  $4
});
$0
endsnippet

snippet for "for loop" b
for (let i = $1; i $2; $3) {
  $4
}
endsnippet

snippet if "if ..." b
if ($1) {
  $2
}
endsnippet

snippet ifel "if ..." b
if ($1) {
  $2
} else {
  $3 
}
endsnippet

snippet env
\begin{${1:enumerate}}
    $0
\end{$1}
endsnippet


snippet ifndef
#ifndef ${1:SOME_DEFINE}
#define $1
$0
#endif /* $1 */
endsnippet

snippet dest "const {  } = something" b
const { $1 } = $2;
endsnippet

snippet exp "export default something" b
export default $1;
endsnippet

snippet pr "property of the object" b
$1: $2,
$3
endsnippet

snippet stlf "styled element flexbox"
const $1 = styled($2).attrs({
})\`
  flex-direction: $3;
  align-items: $4;
  justify-content: $5;
\`;
$0
endsnippet

snippet stlfd "styled element flexbox"
const $1 = styled($2).attrs({
})\`
  flex-direction: ${3:row};
  align-items: ${4:center};
  justify-content: ${5:center};
\`;
$0
endsnippet

snippet stli "styled image"
const $1 = styled($2).attrs({
  resizeMode: 'contain',
  source: (props) => props.source,
})\`
$3z-index: 999;
  margin-left: 20;
  width: 25px;
\`;
endsnippet

snippet rc "create new react component"
class $1 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      $2
    };
		$3
  }

	render() {
	  $4
		return (
    $5
		)
	}
}
$0
endsnippet

snippet a "a with a href attr" b
<a href="${1:http://www.${2:example.com}}"</a>
    $0
</a>
endsnippet

snippet ahc "a with class and href" b
<a href="$1"${2: class="${3:link}"}>
    $0
</a>
endsnippet




snippet stld "styled div" b
const $1 = styled.div\`
  $2
\`
endsnippet

snippet rfc "react function component" b
import React from 'react'
import PropTypes from 'prop-types'

const $1 = () => {
  $2
}

$1.propTypes = {

}

export default $1

endsnippet

snippet rm "map with react element" b
{$1.map(el => <$2>)
endsnippet

snippet tgv "create tag with variable" b
<$1>
  {$2}
</$1>
endsnippet



snippet wrap "wrap content into tg" b
<$1>
  ${VISUAL}
</$1>
endsnippet

snippet mmap "map list" b
{$1.map($2 => <$3 {...$2}/>)}
endsnippet

snippet sll "nested tags" b

const $1 = styled.div\`
  $2
\`

const $3 = styled.div\`
  $4

\`

const $5 = styled.div \`
  $6

\`

<$1>
	<$3>
	  $7
	</$3
	<$5>
	  $8
	</$5>
</$1>
endsnippet


snippet useS "use state" b
const [$1, $2] = useState($3)
endsnippet


snippet rfc2 "react function component with useEffect" b
import React, { useEffect } from 'react'
import PropTypes from 'prop-types'

const $1 = ({ $2 }) => {

  useEffect(() => {

	}, [])

  return (
	  <$3>
		</$3>
	)
}

$1.propTypes = {

}

export default $1
endsnippet

snippet rfc3 "react function component with useState and useEffect" b
import React, { useEffect } from 'react'
import PropTypes from 'prop-types'

const $1 = ({ $2 }) => {
  const [$3, $4] = useState($5)

  useEffect(() => {

	}, [])

  return (
	  <$6>
		</$6>
	)
}

$1.propTypes = {

}

export default $1
endsnippet

snippet rfc4 "react function component with useState and useEffect and map" b
import React, { useEffect } from 'react'
import PropTypes from 'prop-types'

const $1 = ({ $2 }) => {
  const [$3, $4] = useState($5)

  useEffect(() => {

	}, [])

  return (
	  <$6>
		  {$7.map($8 => <$9>)}
		</$6>
	)
}

$1.propTypes = {

}

export default $1
endsnippet







snippet flex1 "display: flex; align-items: center; justify-content: center" b
  display: flex;
	align-items: center;
	justify-content: center;
endsnippet

snippet flex2 "display: flex align-items: center; justify-content: flex-end" b
  display: flex;
	align-items: center;
	justify-content: flex-end;
endsnippet


snippet flex3 "display: flex align-items: center; justify-content: space-between" b
  display: flex;
	align-items: center;
	justify-content: space-between;
endsnippet

snippet flex4 "display: flex align-items: center; justify-content: space-around" b
  display: flex;
	align-items: center;
	justify-content: space-around;
endsnippet


snippet wd "width: 100%" b
  width: 100%;
endsnippet

snippet bg "background-color: " b
  background-color: $1;
endsnippet

snippet box "box-sizing padding margin border: " b
  box-sizing: border-box;
	padding: $1;
	margin: $2;
	border: $3px solid $4;
endsnippet

snippet font "font: " b
  font-size: $1;
	font-family: $2;
	font-weight: $3;
	line-height: $4;
endsnippet


snippet  "customSnippet: " b
import { useEffect, useState } from 'react'
const use$1 = ($2) => {
  const [$3, $4] = useState($5)

  useEffect(() => {
    document.addEventListener('click', $6)
    return () => {
      document.removeEventListener('click', $7)
    }
  })
	return [$8]
}
endsnippet




