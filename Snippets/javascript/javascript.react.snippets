snippet stlf "styled element flexbox"
const $1 = styled($2).attrs({
})\`
  flex-direction: $3;
  align-items: $4;
  justify-content: $5;
\`;
$0
endsnippet

snippet stlfd "styled element flexbox"
const $1 = styled($2).attrs({
})\`
  flex-direction: ${3:row};
  align-items: ${4:center};
  justify-content: ${5:center};
\`;
$0
endsnippet

snippet stli "styled image"
const $1 = styled($2).attrs({
  resizeMode: 'contain',
  source: (props) => props.source,
})\`
$3z-index: 999;
  margin-left: 20;
  width: 25px;
\`;
endsnippet

snippet rc "create new react component"
class $1 extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      $2
    };
		$3
  }

	render() {
	  $4
		return (
    $5
		)
	}
}
$0
endsnippet

snippet a "a with a href attr" b
<a href="${1:http://www.${2:example.com}}"</a>
    $0
</a>
endsnippet

snippet ahc "a with class and href" b
<a href="$1"${2: class="${3:link}"}>
    $0
</a>
endsnippet




snippet stld "styled div" b
const $1 = styled.div\`
  $2
\`
endsnippet

snippet rfc "react function component" b
import React from 'react'
import PropTypes from 'prop-types'

const $1 = () => {
  $2
}

$1.propTypes = {

}

export defalut $1

endsnippet

snippet rm "map with react element" b
{$1.map(el => <$2>)
endsnippet

snippet tgv "create tag with variable" b
<$1>
  {$2}
</$1>
endsnippet



snippet wrap "wrap content into tg" b
<$1>
  ${VISUAL}
</$1>
endsnippet


